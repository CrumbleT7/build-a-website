%h1
  %a#user-content-completing-the-page-content-and-styling.anchor{"aria-hidden" => "true", :href => "#completing-the-page-content-and-styling"}>
    %span.octicon.octicon-link
  Completing the page content and styling
%h2
  %a#user-content-add-the-second-section.anchor{"aria-hidden" => "true", :href => "#add-the-second-section"}>
    %span.octicon.octicon-link
  Add the second section
%p The second section is similar to the first section, so you should understand how it works:
.highlight.highlight-text-html-basic
  %pre
    \&lt;
    %span.pl-ent section
    = succeed "=" do
      %span.pl-e id
    = succeed ">" do
      %span.pl-s
        %span.pl-pds> "
        add-text
        %span.pl-pds "
    = succeed ">Step" do
      %span.pl-ent h2
    = succeed ">" do
      %span.pl-ent h2
    %span.pl-ent input
    = succeed "=" do
      %span.pl-e id
    %span.pl-s
      %span.pl-pds> "
      caption-text
      %span.pl-pds "
    = succeed "=" do
      %span.pl-e type
    %span.pl-s
      %span.pl-pds> "
      text
      %span.pl-pds "
    = succeed "=" do
      %span.pl-e value
    = succeed ">" do
      %span.pl-s
        %span.pl-pds> "
        Curiosity is one of the great secrets of happiness
        %span.pl-pds "
    = succeed ">" do
      %span.pl-ent section
%p
  Add it right below the first section in
  = succeed "." do
    %code index.erb
%p
  %a{:href => "/images/step_6/adding_section_2.png", :target => "_blank"}
    %img{:alt => "adding section 2", :src => "/images/step_6/adding_section_2.png", :style => "max-width:100%;"}/
%h2
  %a#user-content-add-the-workspace.anchor{"aria-hidden" => "true", :href => "#add-the-workspace"}>
    %span.octicon.octicon-link
  Add the 'workspace'
%p Add the third section - the 'workspace' - directly below section 2:
.highlight.highlight-text-html-basic
  %pre
    \&lt;
    %span.pl-ent section
    = succeed "=" do
      %span.pl-e id
    = succeed ">" do
      %span.pl-s
        %span.pl-pds> "
        style-caption
        %span.pl-pds "
    = succeed ">Step" do
      %span.pl-ent h2
    = succeed ">" do
      %span.pl-ent h2
    %span.pl-ent div
    = succeed "=" do
      %span.pl-e id
    = succeed ">" do
      %span.pl-s
        %span.pl-pds> "
        workspace
        %span.pl-pds "
    %span.pl-ent p
    = succeed "=" do
      %span.pl-e id
    = succeed "></" do
      %span.pl-s
        %span.pl-pds> "
        caption
        %span.pl-pds "
    = succeed ">" do
      %span.pl-ent p
    = succeed ">" do
      %span.pl-ent div
    = succeed ">" do
      %span.pl-ent section
%p
  Like we did with
  = succeed "," do
    %code search-results
  = succeed ")" do
    %code id="workplace"
%p
  %a{:href => "/images/step_6/adding_section_3.png", :target => "_blank"}
    %img{:alt => "adding section 3", :src => "/images/step_6/adding_section_3.png", :style => "max-width:100%;"}/
%h2
  %a#user-content-style-the-workspace.anchor{"aria-hidden" => "true", :href => "#style-the-workspace"}>
    %span.octicon.octicon-link
  Style the workspace
%p
  It's been a while since we added any style to our page, so let's get back to some CSS.  We'll create a big red border around our workspace.  It won't bring us fame and fortune as web designers, but that's not the point. Add this to your
  = succeed ":" do
    %code application.css
.highlight.highlight-source-css
  %pre
    %span.pl-e #workspace
    {
    = succeed ":" do
      %span.pl-c1
        %span.pl-c1 width
    = succeed ";" do
      %span.pl-c1
        600
        %span.pl-k px
    = succeed ":" do
      %span.pl-c1
        %span.pl-c1 min-height
    = succeed ";" do
      %span.pl-c1
        300
        %span.pl-k px
    = succeed ":" do
      %span.pl-c1
        %span.pl-c1 border
    %span.pl-c1
      5
      %span.pl-k px
    %span.pl-c1 dashed
    = succeed ";" do
      %span.pl-c1 red
    = succeed ":" do
      %span.pl-c1
        %span.pl-c1 margin
    %span.pl-c1 0
    = succeed ";" do
      %span.pl-c1 auto
%p
  This CSS means that the element with the id of
  %code workspace
  will have a width of 600 pixels, a minimum height of 300 pixels, it will have a 5-pixel dashed red border and will be centred (
  %code margin: 0 auto;
  means zero margin top and bottom, but an automatic margin left and on the right, which has the effect of centring the element).
%p Now the page looks different. Our workspace is visible, it has dimensions, a border around it and it's centred horizontally:
%p
  %a{:href => "/images/step_6/styled_workspace.png", :target => "_blank"}
    %img{:alt => "styled workspace", :src => "/images/step_6/styled_workspace.png", :style => "max-width:100%;"}/
%blockquote
  %p Note: If you are not seeing these changes and you've definitely added the CSS correctly you may need to restart your Cloud9 workspace.  Make sure you've saved your files first!
%p
  When the user clicks one of the thumbnail image search results, we want to load that image into the workspace.  To do that, we'll need some more JavaScript.  Add the following to
  = succeed ":" do
    %code application.js
.highlight.highlight-source-js
  %pre
    $(
    %span.pl-c1> document
    ).
    %span.pl-en> on
    (
    %span.pl-s>
      %span.pl-pds> '
      click
      %span.pl-pds '
    ,
    = succeed "," do
      %span.pl-s
        %span.pl-pds> '
        \#search-results img
        %span.pl-pds '
    = succeed "()" do
      %span.pl-k function
    %span.pl-k var
    url
    %span.pl-k =
    $(
    %span.pl-v> this
    ).
    %span.pl-c1> data
    (
    %span.pl-s>
      %span.pl-pds> '
      url
      %span.pl-pds '
    );
    $(
    %span.pl-s>
      %span.pl-pds> "
      \#workspace img
      %span.pl-pds "
    ).
    %span.pl-en> remove
    ();
    %span.pl-k var
    img
    %span.pl-k =
    $(
    %span.pl-s>
      %span.pl-pds> "
      \&lt;img&gt;
      %span.pl-pds "
    ).
    %span.pl-en> attr
    (
    %span.pl-s>
      %span.pl-pds> '
      src
      %span.pl-pds '
    , url);
    $(
    %span.pl-s>
      %span.pl-pds> "
      \#workspace
      %span.pl-pds "
    ).
    %span.pl-en> append
    (img);
    });
%p
  Let's break it down line by line. You should be familiar with the first line. It says that when an element
  %code #search-results img
  (that is, any
  %code &lt;img&gt;
  element inside the search results area) is clicked, the code inside the function should be executed.
%p
  Line 2 simply gets the url of the source image from the thumbnail image element (
  %code $(this)
  is the thumbnail that was clicked) and saves it into a variable called
  = succeed "." do
    %code url
  = succeed "." do
    %code #workspace
  %code src
  attribute the value of
  = succeed "." do
    %code url
%p Now when we click a thumbnail, the current image in the workspace (if there is one) is removed, and a new image is created and added to the workspace.
%p Try it out in your browser.  Can you see a problem?
%p
  The source images can be many different sizes.  To ensure consistency we need to style the
  %code img
  element to have a set width.  Otherwise, large images will 'overflow' the workspace and small ones will fail to fill it.  Add this to
  %code application.css
  and the browser will scale images to fit:
.highlight.highlight-source-css
  %pre
    %span.pl-e #workspace
    %span.pl-ent img
    {
    = succeed ":" do
      %span.pl-c1
        %span.pl-c1 width
    = succeed ";" do
      %span.pl-c1
        600
        %span.pl-k px
%p Save all files and refresh your browser. Now, when you search for an image and click one of the results, it is loaded correctly into the workspace:
%p
  %a{:href => "/images/step_6/image_sized_in_workspace.png", :target => "_blank"}
    %img{:alt => "image sized in workspace", :src => "/images/step_6/image_sized_in_workspace.png", :style => "max-width:100%;"}/
%p
  But what is the extra space between the image and the red border at the top? This is actually our caption element getting in the way. We don't want the caption to appear
  %em before
  the image in this way, we actually want it to be
  %em overlaid
  on the image.  Again, we can achieve this with some CSS in
  = succeed ":" do
    %code application.css
.highlight.highlight-source-css
  %pre
    %span.pl-e #caption
    {
    = succeed ":" do
      %span.pl-c1
        %span.pl-c1 position
    = succeed ";" do
      %span.pl-c1 absolute
    = succeed ":" do
      %span.pl-c1
        %span.pl-c1 top
    = succeed ";" do
      %span.pl-c1
        10
        %span.pl-k px
    = succeed ":" do
      %span.pl-c1
        %span.pl-c1 left
    = succeed ";" do
      %span.pl-c1
        10
        %span.pl-k px
    %span.pl-e #workspace
    {
    = succeed ":" do
      %span.pl-c1
        %span.pl-c1 position
    = succeed ";" do
      %span.pl-c1 relative
%blockquote
  %p
    Note: you don't need to create a new
    %code #workspace
    section in
    %code application.css
    \- you can add
    %code position: relative;
    to the existing one if you prefer.
%p
  Great, so now our caption is not messing up the layout; but it's also not appearing at all.  That's kinda dumb.  We want the caption to be whatever the user typed into Section 2. Do you remember we gave that input box the id
  = succeed "?" do
    %code text
  %code input
  event for this field (which happens every time something is typed into the input box). Put this in your
  = succeed ":" do
    %code application.js
.highlight.highlight-source-js
  %pre
    $(
    %span.pl-c1> document
    ).
    %span.pl-en> on
    (
    %span.pl-s>
      %span.pl-pds> '
      ready
      %span.pl-pds '
    ,
    = succeed "()" do
      %span.pl-k function
    = succeed ")." do
      %span.pl-s
        %span.pl-pds> "
        \#caption
        %span.pl-pds "
    = succeed "($(" do
      %span.pl-c1 text
    = succeed ")." do
      %span.pl-s
        %span.pl-pds> '
        \#caption-text
        %span.pl-pds '
    = succeed "());" do
      %span.pl-en val
    = succeed ")." do
      %span.pl-c1 document
    = succeed "(" do
      %span.pl-en on
    = succeed "," do
      %span.pl-s
        %span.pl-pds> '
        input
        %span.pl-pds '
    = succeed "," do
      %span.pl-s
        %span.pl-pds> '
        \#caption-text
        %span.pl-pds '
    = succeed "()" do
      %span.pl-k function
    = succeed ")." do
      %span.pl-s
        %span.pl-pds> "
        \#caption
        %span.pl-pds "
    = succeed "($(" do
      %span.pl-c1 text
    = succeed ")." do
      %span.pl-v this
    = succeed "());" do
      %span.pl-en val
%p Try it - the caption should now be correctly initialized and change whenever the text in Section 2 changes:
%p
  %a{:href => "/images/step_6/initialized_caption.png", :target => "_blank"}
    %img{:alt => "initialized caption", :src => "/images/step_6/initialized_caption.png", :style => "max-width:100%;"}/
%p
  But it's a bit underwhelming.  Let's use CSS to give it more impact! Amend the
  %code #caption
  section in
  = succeed ":" do
    %code application.css
.highlight.highlight-source-css
  %pre
    %span.pl-e #caption
    {
    = succeed ":" do
      %span.pl-c1
        %span.pl-c1 position
    = succeed ";" do
      %span.pl-c1 absolute
    = succeed ":" do
      %span.pl-c1
        %span.pl-c1 top
    = succeed ";" do
      %span.pl-c1
        10
        %span.pl-k px
    = succeed ":" do
      %span.pl-c1
        %span.pl-c1 left
    = succeed ";" do
      %span.pl-c1
        10
        %span.pl-k px
    = succeed ":" do
      %span.pl-c1
        %span.pl-c1 font-weight
    = succeed ";" do
      %span.pl-c1 bold
    = succeed ":" do
      %span.pl-c1
        %span.pl-c1 font-family
    = succeed ";" do
      %span.pl-c1 Helvetica
    = succeed ":" do
      %span.pl-c1
        %span.pl-c1 text-shadow
    %span.pl-c1 0
    %span.pl-c1 0
    %span.pl-c1
      5
      %span.pl-k px
    = succeed "(" do
      %span.pl-c1 rgba
    = succeed ");" do
      %span.pl-c1 0,0,0,0.4
    = succeed ":" do
      %span.pl-c1
        %span.pl-c1 width
    = succeed ";" do
      %span.pl-c1
        400
        %span.pl-k px
    = succeed ":" do
      %span.pl-c1
        %span.pl-c1 font-size
    = succeed ";" do
      %span.pl-c1
        32
        %span.pl-k px
    = succeed ":" do
      %span.pl-c1
        %span.pl-c1 color
    = succeed ";" do
      %span.pl-c1 red
    = succeed ":" do
      %span.pl-c1
        %span.pl-c1 margin
    = succeed ";" do
      %span.pl-c1 0
%p This should be fairly self-explanatory but if you are unsure please do go off and do some research into CSS.  Now the caption is much more noticeable:
%p
  %a{:href => "/images/step_6/styled_caption.png", :target => "_blank"}
    %img{:alt => "styled caption", :src => "/images/step_6/styled_caption.png", :style => "max-width:100%;"}/
%h2
  %a#user-content-add-caption-editing-controls.anchor{"aria-hidden" => "true", :href => "#add-caption-editing-controls"}>
    %span.octicon.octicon-link
  Add caption editing controls
%p By now our website is starting to resemble an end product. Let's add the caption editing controls. You've already seen how to add input elements to enter text. The input elements to enter numbers and drop-down boxes are not that different. So, here's the set of elements we're about to create:
%p
  %a{:href => "/images/step_6/image_controls.png", :target => "_blank"}
    %img{:alt => "image controls", :src => "/images/step_6/image_controls.png", :style => "max-width:100%;"}/
%p
  First, we'll add a container element with an id of
  %code caption-controls
  after the workspace element in
  = succeed ":" do
    %code index.erb
.highlight.highlight-text-html-basic
  %pre
    \&lt;
    %span.pl-ent div
    = succeed "=" do
      %span.pl-e id
    = succeed ">" do
      %span.pl-s
        %span.pl-pds> "
        workspace
        %span.pl-pds "
    %span.pl-ent p
    = succeed "=" do
      %span.pl-e id
    = succeed "></" do
      %span.pl-s
        %span.pl-pds> "
        caption
        %span.pl-pds "
    = succeed ">" do
      %span.pl-ent p
    = succeed ">" do
      %span.pl-ent div
    %span.pl-ent div
    = succeed "=" do
      %span.pl-e id
    = succeed ">" do
      %span.pl-s
        %span.pl-pds> "
        caption-controls
        %span.pl-pds "
    = succeed ">" do
      %span.pl-ent div
%p Now let's add the first input element for the left offset:.
.highlight.highlight-text-html-basic
  %pre
    \&lt;
    %span.pl-ent div
    = succeed "=" do
      %span.pl-e id
    = succeed ">" do
      %span.pl-s
        %span.pl-pds> "
        caption-controls
        %span.pl-pds "
    %span.pl-ent input
    = succeed "=" do
      %span.pl-e type
    %span.pl-s
      %span.pl-pds> "
      number
      %span.pl-pds "
    = succeed "=" do
      %span.pl-e value
    %span.pl-s
      %span.pl-pds> "
      10
      %span.pl-pds "
    = succeed "=" do
      %span.pl-e id
    = succeed ">" do
      %span.pl-s
        %span.pl-pds> "
        caption-left
        %span.pl-pds "
    = succeed ">" do
      %span.pl-ent div
%p This creates an input box of type "number" (as opposed to "text" that we've used so far). It behaves just like a text input but has two small arrows that allow you to increase or decrease the number. Now our page looks like this:
%p
  %a{:href => "/images/step_6/first_image_control.png", :target => "_blank"}
    %img{:alt => "first image control", :src => "/images/step_6/first_image_control.png", :style => "max-width:100%;"}/
%p Adding other number controls is very similar:
.highlight.highlight-text-html-basic
  %pre
    \&lt;
    %span.pl-ent div
    = succeed "=" do
      %span.pl-e id
    = succeed ">" do
      %span.pl-s
        %span.pl-pds> "
        caption-controls
        %span.pl-pds "
    %span.pl-ent input
    = succeed "=" do
      %span.pl-e type
    %span.pl-s
      %span.pl-pds> "
      number
      %span.pl-pds "
    = succeed "=" do
      %span.pl-e value
    %span.pl-s
      %span.pl-pds> "
      10
      %span.pl-pds "
    = succeed "=" do
      %span.pl-e id
    = succeed ">" do
      %span.pl-s
        %span.pl-pds> "
        caption-left
        %span.pl-pds "
    %span.pl-ent input
    = succeed "=" do
      %span.pl-e type
    %span.pl-s
      %span.pl-pds> "
      number
      %span.pl-pds "
    = succeed "=" do
      %span.pl-e value
    %span.pl-s
      %span.pl-pds> "
      10
      %span.pl-pds "
    = succeed "=" do
      %span.pl-e id
    = succeed ">" do
      %span.pl-s
        %span.pl-pds> "
        caption-top
        %span.pl-pds "
    %span.pl-ent input
    = succeed "=" do
      %span.pl-e type
    %span.pl-s
      %span.pl-pds> "
      number
      %span.pl-pds "
    = succeed "=" do
      %span.pl-e value
    %span.pl-s
      %span.pl-pds> "
      400
      %span.pl-pds "
    = succeed "=" do
      %span.pl-e id
    = succeed ">" do
      %span.pl-s
        %span.pl-pds> "
        caption-width
        %span.pl-pds "
    %span.pl-ent input
    = succeed "=" do
      %span.pl-e type
    %span.pl-s
      %span.pl-pds> "
      number
      %span.pl-pds "
    = succeed "=" do
      %span.pl-e value
    %span.pl-s
      %span.pl-pds> "
      32
      %span.pl-pds "
    = succeed "=" do
      %span.pl-e id
    = succeed ">" do
      %span.pl-s
        %span.pl-pds> "
        caption-size
        %span.pl-pds "
    = succeed ">" do
      %span.pl-ent div
%p
  %a{:href => "/images/step_6/other_offset_controls.png", :target => "_blank"}
    %img{:alt => "other offset controls", :src => "/images/step_6/other_offset_controls.png", :style => "max-width:100%;"}/
%p
  Adding drop-down boxes is similar, but these use the
  %code &lt;select&gt;
  tag instead.  A
  %code &lt;select&gt;
  element can have child
  %code &lt;option&gt;
  elements, which determine the entries in the dropdown list.  Let's add the control for selecting colour inside the
  %code #controls
  element:
.highlight.highlight-text-html-basic
  %pre
    \&lt;
    %span.pl-ent div
    = succeed "=" do
      %span.pl-e id
    = succeed ">" do
      %span.pl-s
        %span.pl-pds> "
        caption-controls
        %span.pl-pds "
    %span.pl-ent input
    = succeed "=" do
      %span.pl-e type
    %span.pl-s
      %span.pl-pds> "
      number
      %span.pl-pds "
    = succeed "=" do
      %span.pl-e value
    %span.pl-s
      %span.pl-pds> "
      10
      %span.pl-pds "
    = succeed "=" do
      %span.pl-e id
    = succeed ">" do
      %span.pl-s
        %span.pl-pds> "
        caption-left
        %span.pl-pds "
    %span.pl-ent input
    = succeed "=" do
      %span.pl-e type
    %span.pl-s
      %span.pl-pds> "
      number
      %span.pl-pds "
    = succeed "=" do
      %span.pl-e value
    %span.pl-s
      %span.pl-pds> "
      10
      %span.pl-pds "
    = succeed "=" do
      %span.pl-e id
    = succeed ">" do
      %span.pl-s
        %span.pl-pds> "
        caption-top
        %span.pl-pds "
    %span.pl-ent input
    = succeed "=" do
      %span.pl-e type
    %span.pl-s
      %span.pl-pds> "
      number
      %span.pl-pds "
    = succeed "=" do
      %span.pl-e value
    %span.pl-s
      %span.pl-pds> "
      400
      %span.pl-pds "
    = succeed "=" do
      %span.pl-e id
    = succeed ">" do
      %span.pl-s
        %span.pl-pds> "
        caption-width
        %span.pl-pds "
    %span.pl-ent input
    = succeed "=" do
      %span.pl-e type
    %span.pl-s
      %span.pl-pds> "
      number
      %span.pl-pds "
    = succeed "=" do
      %span.pl-e value
    %span.pl-s
      %span.pl-pds> "
      32
      %span.pl-pds "
    = succeed "=" do
      %span.pl-e id
    = succeed ">" do
      %span.pl-s
        %span.pl-pds> "
        caption-size
        %span.pl-pds "
    %span.pl-ent select
    = succeed "=" do
      %span.pl-e id
    = succeed ">" do
      %span.pl-s
        %span.pl-pds> "
        caption-colour
        %span.pl-pds "
    = succeed ">red</" do
      %span.pl-ent option
    = succeed ">" do
      %span.pl-ent option
    = succeed ">green</" do
      %span.pl-ent option
    = succeed ">" do
      %span.pl-ent option
    = succeed ">white</" do
      %span.pl-ent option
    = succeed ">" do
      %span.pl-ent option
    = succeed ">black</" do
      %span.pl-ent option
    = succeed ">" do
      %span.pl-ent option
    = succeed ">blue</" do
      %span.pl-ent option
    = succeed ">" do
      %span.pl-ent option
    = succeed ">yellow</" do
      %span.pl-ent option
    = succeed ">" do
      %span.pl-ent option
    = succeed ">gray</" do
      %span.pl-ent option
    = succeed ">" do
      %span.pl-ent option
    = succeed ">orange</" do
      %span.pl-ent option
    = succeed ">" do
      %span.pl-ent option
    = succeed ">" do
      %span.pl-ent select
    = succeed ">" do
      %span.pl-ent div
%p If you've done everything correctly, you should see it in your browser:
%p
  %a{:href => "/images/step_6/colour_select_control.png", :target => "_blank"}
    %img{:alt => "colour select control", :src => "/images/step_6/colour_select_control.png", :style => "max-width:100%;"}/
%p
  Add the 'Align' dropdown box using similar code.  The options are 'left', 'center' and 'right' (note the US spelling of
  %code center
  required by CSS):
%p
  %a{:href => "/images/step_6/align_select_control.png", :target => "_blank"}
    %img{:alt => "align select control", :src => "/images/step_6/align_select_control.png", :style => "max-width:100%;"}/
%p We have all the elements we need for controlling our caption, but they aren't active yet. Changing the values does nothing to the position or the  style of the caption. We'll fix that in the next step.
%p
  %a{:href => "/steps/5.md"} Previous step
  |
  %a{:href => "/steps/7.md"} Continue to Step 7
